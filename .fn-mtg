# Instructions:
# 1. Source this file (`source .fn-mtg`)
# 2. Run stuff!

# `fu` will download and install the latest forge version to a given directory, updating if it already exists
# `f2d` will convert a forge xxxx.dck file to a decked xxxx.converted.dec file
# `d2f` will convert a decked xxxx.dec file to a forge xxxx.converted.dck file

function fu {
  directory=$(echo $1 | sed -r 's/\/$//')
  if [ ! -d "$directory" ]; then echo "Usage $0 directory_name"; return 1; fi

  url=https://downloads.cardforge.org/dailysnapshots/
  file=$(curl -s $url | grep -oE '"forge-gui-desktop.+\.tar.bz2"' | sed -r 's/"//g')

  rm -rf $directory/forge_latest
  mkdir -p $directory/forge_latest
  cd $directory/forge_latest

  echo "Downloading from ${url}${file}"
  curl -s ${url}${file} -o ./${file} && tar -xf ${file} && rm -f ${file}
  file_count=$(ls -l * | wc -l)

  cd -
  if [ "$file_count" = 1 ];
  then
    rm -rf $directory/forge_latest
    return
  fi

  rm -rf $directory/forge
  mv $directory/forge_latest $directory/forge

  return 0
}

function mcu {
  overwrite=$1

  url=https://mtgjson.com/api/v5/AllPrintings.json
  if [ ! -f ~/AllPrintings.json ] || [ ! -z $overwrite ]; then curl -s $url -o ~/AllPrintings.json; fi
  jq -r '.data[].cards[] | select (.language == "English" and (.isPromo == null or .isPromo == false) and (.availability | index("paper")) and (.isFullArt == null or .isFullArt == false) and (.side == null or .side == "a") and (.identifiers.multiverseId != null)) | .identifiers.multiverseId + ";" + .setCode + ";" + .name' ~/AllPrintings.json | grep -vE ';$' | sort -n > ~/mvid.list

  return 0
}

function d2f {
  file=$1
  if [ -z $file ]; then echo "Usage: $0 <decked-file>"; return 1; fi
  if [ ! -f $file ]; then echo "$1 not found"; return 1; fi
  if [ -z "$(grep -E '\/\/\/mvid' $file)" ]; then echo "$file is not in Decked format"; return 1; fi

  deck_name=$(echo $file | sed -r 's/^([^\.]+)\..*$/\1/')
  file_converted=$deck_name.converted.dck

  if [ ! -f ~/mvid.list ]; then mcu; fi
  rm -f $file_converted && touch $file_converted

  echo "[metadata]" > $file_converted
  echo "Name=$deck_name" >> $file_converted
  echo "" >> $file_converted
  echo "[Main]" >> $file_converted
  while read line
  do
    line=$(echo $line | sed -r 's/^[\s\r\t\n]//' | sed -r 's/[\s\r\t\n]$//')
    if [ -z "$line" ]; then continue; fi

    mvid=$(echo $line | sed -r 's/^\/\/\/mvid:([0-9]+) qty:([0-9]+) name:(.*) loc:(Deck|SB)$/\1/')
    quantity=$(echo $line | sed -r 's/^\/\/\/mvid:([0-9]+) qty:([0-9]+) name:(.*) loc:(Deck|SB)$/\2/')
    card_name=$(echo $line | sed -r 's/^\/\/\/mvid:([0-9]+) qty:([0-9]+) name:(.*) loc:(Deck|SB)$/\3/' | sed -r 's/ \/\/ .+$//')
    location=$(echo $line | sed -r 's/^\/\/\/mvid:([0-9]+) qty:([0-9]+) name:(.*) loc:(Deck|SB)$/\4/')

    echo "Adding $card_name to deck"
    card_info=$(grep -E ";$card_name( \/\/|$)" ~/mvid.list | tail -n 1)
    if [ -z "$card_info" ]; then echo "Lookup failed for $card_name in $file"; continue; fi
    set=$(echo $card_info | sed -r 's/^([0-9]+);(.*);(.*)$/\2/')

    echo "$quantity $card_name|$set" >> $file_converted
  done <<< $(grep -E '\/\/\/mvid.+ loc:Deck$' "$file")

  echo "" >> $file_converted
  echo "[Sideboard]" >> $file_converted
  while read line
  do
    line=$(echo $line | sed -r 's/^[\s\r\t\n]//' | sed -r 's/[\s\r\t\n]$//')
    if [ -z "$line" ]; then continue; fi

    mvid=$(echo $line | sed -r 's/^\/\/\/mvid:([0-9]+) qty:([0-9]+) name:(.*) loc:(Deck|SB)$/\1/')
    quantity=$(echo $line | sed -r 's/^\/\/\/mvid:([0-9]+) qty:([0-9]+) name:(.*) loc:(Deck|SB)$/\2/')
    card_name=$(echo $line | sed -r 's/^\/\/\/mvid:([0-9]+) qty:([0-9]+) name:(.*) loc:(Deck|SB)$/\3/' | sed -r 's/ \/\/ .+$//')
    location=$(echo $line | sed -r 's/^\/\/\/mvid:([0-9]+) qty:([0-9]+) name:(.*) loc:(Deck|SB)$/\4/')

    echo "Adding $card_name to sideboard"
    card_info=$(grep -E ";$card_name( \/\/|$)" ~/mvid.list | tail -n 1)
    if [ -z "$card_info" ]; then echo "Lookup failed for $card_name in $file"; continue; fi
    set=$(echo $card_info | sed -r 's/^([0-9]+);(.*);(.*)$/\2/')

    echo "$quantity $card_name|$set" >> $file_converted
  done <<< $(grep -E '\/\/\/mvid.+ loc:SB$' "$file")

  return 0
}

function f2d {
  file=$1
  if [ -z $file ]; then echo "Usage: $0 <forge-file>"; return 1; fi
  if [ ! -f $file ]; then echo "$1 not found"; return 1; fi
  if [ -z "$(grep -E '\[Main\]' $file)" ]; then echo "$file is not in Forge format"; return 1; fi

  deck_name=$(echo $file | sed -r 's/^([^\.]+)\..*$/\1/')
  file_converted=$deck_name.converted.dec

  if [ ! -f ~/mvid.list ]; then mcu; fi
  rm -f $file_converted && touch $file_converted

  section=""
  prefix=""
  while read line
  do
    line=$(echo $line | sed -r 's/^[\s\r\t\n]//' | sed -r 's/[\s\r\t\n]$//')
    if [ -z "$line" ]; then continue; fi
    if [ ! -z "$(echo $line | grep '^\[')" ];
    then
      section=$(echo $line | sed -r 's/(\[|\])//g')
      continue
    fi

    if [ -z "$(echo $section | grep -E '(Main|Sideboard)')" ];
    then
      continue
    fi

    location="Deck"
    location_message="deck"
    prefix=""
    if [ ! -z "$(echo $section | grep 'Sideboard')" ];
    then
      location='SB'
      location_message="sideboard"
      prefix='SB: '
    fi

    quantity=$(echo $line | sed -r 's/^([0-9]+) ([^|]+)\|([^|]+)(\|([^|]+))?$/\1/')
    card_name=$(echo $line | sed -r 's/^([0-9]+) ([^|]+)\|([^|]+)(\|([^|]+))?$/\2/')
    set=$(echo $line | sed -r 's/^([0-9]+) ([^|]+)\|([^|]+)(\|([^|]+))?$/\3/')

    echo "Adding $card_name to $location_message"
    card_info_name=$(grep -E ";$card_name( \/\/|$)" ~/mvid.list)
    card_info=$(echo $card_info_name | grep -E "^[0-9]+;${set};" | tail -n 1)

    if [ -z "$card_info" ]; then echo "Lookup failed for $card_name, $set in $file"; continue; fi

    card_name_decked=$(echo $card_info | sed -r 's/^([0-9]+);(.*);(.*)$/\3/')
    multiverseId=$(echo $card_info | sed -r 's/^([0-9]+);(.*);(.*)$/\1/')

    echo "///mvid:$multiverseId qty:$quantity name:$card_name_decked loc:$location" >> $file_converted
    echo "${prefix}$quantity $card_name_decked" >> $file_converted
  done <<< $(cat $file)

  return 0
}
