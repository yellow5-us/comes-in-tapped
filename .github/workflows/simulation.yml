name: '[Run simulation]'

on:
  workflow_dispatch:
    inputs:
      deck_1:
        description: Deck 1
        type: string
        required: true
        default: 'prinny/forge/complete/absol.dck'
      deck_2:
        description: Deck 2
        type: string
        required: true
        default: 'prinny/forge/complete/altaria.dck'
      rounds:
        description: Rounds
        type: string
        required: true
        default: '7'
  workflow_call:
    inputs:
      deck_1:
        description: Deck 1
        type: string
        required: true
      deck_2:
        description: Deck 2
        type: string
        required: true
      rounds:
        description: Rounds
        type: string
        required: true
        default: '7'
      log_file:
        description: Log filename
        type: string
      error_on_loss:
        description: Throw error on match loss
        type: string
        default: 'false'
    outputs:
      results_deck_1:
        value: '${{ jobs.sim.outputs.results_deck_1 }}'
      results_score_1:
        value: '${{ jobs.sim.outputs.results_score_1 }}'
      results_deck_2:
        value: '${{ jobs.sim.outputs.results_deck_2 }}'
      results_score_2:
        value: '${{ jobs.sim.outputs.results_score_2 }}'

permissions:
  id-token: write
  contents: read

env:
  FORGE_SNAPSHOT_URL: 'https://downloads.cardforge.org/dailysnapshots/'
  HOME: '/home/runner'

jobs:
  sanitize:
    name: Sanitize
    outputs:
      deck_1: ${{ steps.sanitize.outputs.deck_1 }}
      deck_2: ${{ steps.sanitize.outputs.deck_2 }}
      rounds: ${{ steps.sanitize.outputs.rounds }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Sanitize inputs
        id: sanitize
        run: |
          if [ ! -f "${{ inputs.deck_1 }}" ]; then echo "${{ inputs.deck_1 }} not found"; exit 1; fi
          deck_1=$(echo '${{ inputs.deck_1 }}' | sed -r 's/^.+\/([^\/]+)\.dck$/\1/')
          echo "deck_1=${deck_1}" >> $GITHUB_OUTPUT

          if [ ! -f "${{ inputs.deck_2 }}" ]; then echo "${{ inputs.deck_2 }} not found"; exit 1; fi
          deck_2=$(echo '${{ inputs.deck_2 }}' | sed -r 's/^.+\/([^\/]+)\.dck$/\1/')
          echo "deck_2=${deck_2}" >> $GITHUB_OUTPUT

          rounds="$(( ${{ inputs.rounds }} + 0 ))"
          if [[ "$rounds" -lt 1 ]]; then echo "Rounds is $rounds"; exit 1; fi
          echo "rounds=${rounds}" >> $GITHUB_OUTPUT

  sim:
    name: 'Simulate ${{ needs.sanitize.outputs.deck_1 }} vs. ${{ needs.sanitize.outputs.deck_2 }} (${{ needs.sanitize.outputs.rounds }}x)'
    needs: [sanitize]
    output:
      results_deck_1: ${{ steps.results.outputs.deck_1 }}
      results_score_1: ${{ steps.results.outputs.score_1 }}
      results_deck_2: ${{ steps.results.outputs.deck_2 }}
      results_score_2: ${{ steps.results.outputs.score_2 }}

    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Cache setup'
        id: cache-forge
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.HOME }}/forge
          key: forge
          restore-keys: forge

      - name: 'Get download info'
        id: version
        if: steps.cache-forge.outputs.cache-hit != 'true'
        run: |
          echo "name=$(curl -s ${{ env.FORGE_SNAPSHOT_URL }} | grep -oE '"forge-gui-desktop.+\.tar.bz2"' | sed -r 's/"//g')" >> $GITHUB_OUTPUT

      - name: 'Install Forge'
        if: steps.cache-forge.outputs.cache-hit != 'true'
        run: |
          mkdir -p $HOME/forge && cd $HOME/forge
          curl -s ${{ env.FORGE_SNAPSHOT_URL }}${{ steps.version.outputs.name }} -o ./${{ steps.version.outputs.name }} && tar -xf ${{ steps.version.outputs.name }} && rm -f ${{ steps.version.outputs.name }}

      - name: 'Get jar file name'
        id: jar
        working-directory: ${{ env.HOME }}/forge
        run: |
          echo "name=$(ls forge-gui-desktop-*.jar)" >> $GITHUB_OUTPUT

      - name: 'Symlink deck path'
        run: |
          mkdir -p $HOME/.forge/decks
          rm -f $HOME/.forge/decks/constructed && ln -s $HOME/work/comes-in-tapped/comes-in-tapped $HOME/.forge/decks/constructed

      - name: 'Run simulation'
        working-directory: ${{ env.HOME }}/forge
        run: |
          export DISPLAY=:99
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          java -Xmx4096m -Dfile.encoding=UTF-8 -jar ${{ steps.jar.outputs.name }} sim -d "${{ inputs.deck_1 }}" "${{ inputs.deck_2 }}" -n ${{ needs.sanitize.outputs.rounds }}

      - name: 'Get match results'
        id: results
        run: |
          line=$(grep '^Match result: ' $HOME/.forge/forge.log | tail -n 1)
          echo $line

          deck_1=$(echo $line | sed -r 's/^[^-]+-([^:]+): ([0-9]+) [^-]+-([^:]+): ([0-9]+) *$/\1/')
          score_1=$(echo $line | sed -r 's/^[^-]+-([^:]+): ([0-9]+) [^-]+-([^:]+): ([0-9]+) *$/\2/')
          deck_2=$(echo $line | sed -r 's/^[^-]+-([^:]+): ([0-9]+) [^-]+-([^:]+): ([0-9]+) *$/\3/')
          score_2=$(echo $line | sed -r 's/^[^-]+-([^:]+): ([0-9]+) [^-]+-([^:]+): ([0-9]+) *$/\4/')

          echo "deck_1=$deck_1" >> $GITHUB_OUTPUT
          echo "score_1=$score_1" >> $GITHUB_OUTPUT
          echo "deck_2=$deck_2" >> $GITHUB_OUTPUT
          echo "score_2=$score_2" >> $GITHUB_OUTPUT

          if [ "${{ inputs.error_on_loss }}" == "true" ];
          then
            if [ "$deck_1" == "${{ inputs.deck_1 }}" ] && [ "$score_1" -lt "$score_2" ]; then echo "Failed too many matches"; exit 1; fi
            if [ "$deck_2" == "${{ inputs.deck_1 }}" ] && [ "$score_2" -lt "$score_1" ]; then echo "Failed too many matches"; exit 1; fi
          fi

      - name: 'Upload full log'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.log_file || 'forge.log' }}
          path: ${{ env.HOME }}/.forge/forge.log
